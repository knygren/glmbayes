#!/bin/bash

echo "üîß Generating src/Makevars..."

# Clean old Makevars
rm -f src/Makevars

# Detect the script's own directory
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# Echo the resolved path to the screen
echo "DEBUG: configure is running from: $SCRIPT_DIR"



# ----------------------------
# üîç Detect OpenCL header
CL_HEADER=$(find /usr /usr/local /opt -type f -name cl.h 2>/dev/null | grep "/CL/cl.h" | head -n 1)

if [ -n "$CL_HEADER" ]; then
  CL_INC_DIR=$(dirname "$CL_HEADER")
  # Try to locate the OpenCL library using the header path
  CL_LIB_DIR=$(find /usr /usr/local /opt -type f -name libOpenCL.so 2>/dev/null | xargs -n1 dirname | head -n 1)
  echo "‚úÖ OpenCL found: header at $CL_INC_DIR, library at $CL_LIB_DIR"
  USE_OPENCL=1
else
  echo "‚ö†Ô∏è OpenCL not found. Will compile without it."
  USE_OPENCL=0
fi

# ----------------------------
TBB_CFLAGS=$(Rscript -e "RcppParallel::CxxFlags()")

echo "üîß TBB_CFLAGS: $TBB_CFLAGS"

# üîß Compile-time TBB flags
TBB_LIBS1=$(Rscript -e "RcppParallel::LdFlags()")

echo "üîß TBB_LIBS1 (compile/link): $TBB_LIBS1"

# üîç Runtime rpath flags derived from -L paths
TBB_LIBS2=$(Rscript -e "
flags <- RcppParallel::LdFlags()
paths <- strsplit(flags, ' ')[[1]]
rpaths <- paste(gsub('^-L', '-Wl,-rpath=', paths[grepl('^-L', paths)]), collapse=' ')
cat(rpaths)
")
echo "üîç TBB_LIBS2 (rpath):         $TBB_LIBS2"

# üß© Combined linker and rpath flags
TBB_LIBS="$TBB_LIBS1 $TBB_LIBS2"

# üì£ Echo details for inspection
=======
echo "üîß TBB_LIBS1 (compile/link): $TBB_LIBS1"
echo "üîç TBB_LIBS2 (rpath):         $TBB_LIBS2"
echo "üì¶ Combined TBB_LIBS:         $TBB_LIBS"



# ----------------------------
# üóÇÔ∏è Detect source files, exclude OpenCL ones if needed
##ALL_CPP=$(ls src/*.cpp | sed 's|src/||')
ALL_CPP=$(ls src/*.c src/*.cpp 2>/dev/null | sed 's|src/||')

EXCLUDED_CPP="load_kernel_source.cpp load_kernel_library.cpp"

echo "DEBUG: ALL_CPP is: $ALL_CPP"
echo "DEBUG: EXCLUDED_CPP is: $EXCLUDED_CPP"

if [ "$USE_OPENCL" = "1" ]; then
  FINAL_CPP="$ALL_CPP"
else
  # Filter out excluded files

echo "$ALL_CPP" | sort > /tmp/all_cpp_sorted.$$
echo "$EXCLUDED_CPP" | sort > /tmp/excluded_cpp_sorted.$$

FINAL_CPP=$(comm -23 /tmp/all_cpp_sorted.$$ /tmp/excluded_cpp_sorted.$$)

echo "DEBUG: FINAL_CPP is: $FINAL_CPP"

# Clean up
rm -f /tmp/all_cpp_sorted.$$ /tmp/excluded_cpp_sorted.$$

fi

# Convert to .o format

##FINAL_OBJS=$(echo "$FINAL_CPP" | sed 's/\.cpp$/.o/' | paste -sd " " -)
FINAL_OBJS=$(echo "$FINAL_CPP" | sed -E 's/\.(cpp|c)$/.o/' | paste -sd " " -)

echo "DEBUG: FINAL_OBJS resolved to: $FINAL_OBJS"

echo "‚úÖ R include directory detected at $R_INCLUDE_DIR"


# ----------------------------
# üì¶ Detect R include directory
R_INCLUDE_DIR=$(R CMD config --cppflags | sed 's/-I//')
echo "‚úÖ R include directory detected at $R_INCLUDE_DIR"



# üõ† Write Makevars
{
  echo "CXX_STD = CXX17"
  echo "PKG_CPPFLAGS = -I$R_INCLUDE_DIR $TBB_CFLAGS"
  echo "PKG_CFLAGS = -I$R_INCLUDE_DIR $TBB_CFLAGS"
  echo "PKG_CXXFLAGS = \$(SHLIB_OPENMP_CXXFLAGS)"
  echo "OBJECTS = $FINAL_OBJS"
  echo "PKG_OBJECTS = \$(OBJECTS)"

  echo "glmbayes.so: \$(OBJECTS)"
  echo "	\$(CXX) -std=gnu++17 -shared -o glmbayes.so \$(OBJECTS) \$(PKG_LIBS)"

  if [ "$USE_OPENCL" = "1" ]; then
    echo "PKG_CPPFLAGS += -DUSE_OPENCL -I$CL_INC_DIR"
    echo "PKG_CFLAGS += -DUSE_OPENCL -I$CL_INC_DIR"
    echo "PKG_LIBS = \$(SHLIB_OPENMP_CXXFLAGS) -L$CL_LIB_DIR -lOpenCL $TBB_LIBS -lstdc++ -lgcc \$(LAPACK_LIBS) \$(BLAS_LIBS) \$(FLIBS)"
  else
    echo "PKG_LIBS = \$(SHLIB_OPENMP_CXXFLAGS) $TBB_LIBS -lstdc++ -lgcc \$(LAPACK_LIBS) \$(BLAS_LIBS) \$(FLIBS)"
  fi
} > src/Makevars

# üîç Confirm final Makevars contents
echo ""
echo "üìÑ Contents of src/Makevars:"
echo "---------------------------"
cat src/Makevars
echo "---------------------------"



DEBUG_PATH="inst/debug/Makevars_debug"
mkdir -p "$(dirname "$DEBUG_PATH")"
echo "üîç Attempting to write to: $DEBUG_PATH"

echo "DEBUG: FINAL_OBJS FED TO MAKEVARS_DEBUG: '$FINAL_OBJS'"

# Base Makevars block
cat <<EOF > "$DEBUG_PATH"
CXX_STD = CXX17
PKG_CXXFLAGS = \$(SHLIB_OPENMP_CXXFLAGS) $TBB_CFLAGS -I$R_INCLUDE_DIR
OBJECTS = $FINAL_OBJS
PKG_OBJECTS = \$(OBJECTS)
EOF

# Conditional OpenCL block
if [ "$USE_OPENCL" = "1" ]; then
  cat <<EOF >> "$DEBUG_PATH"
PKG_CXXFLAGS += -DUSE_OPENCL -I$CL_INC_DIR
PKG_LIBS = \$(SHLIB_OPENMP_CXXFLAGS) -L$CL_LIB_DIR -lOpenCL $TBB_LIBS -lstdc++ -lgcc \$(LAPACK_LIBS) \$(BLAS_LIBS) \$(FLIBS)
EOF
else
  cat <<EOF >> "$DEBUG_PATH"
PKG_LIBS = \$(SHLIB_OPENMP_CXXFLAGS) $TBB_LIBS -lstdc++ -lgcc \$(LAPACK_LIBS) \$(BLAS_LIBS) \$(FLIBS)
EOF
fi

echo "üìù Debug Makevars written to: $DEBUG_PATH"
echo "‚úÖ src/Makevars generated with CXX17 support."

echo "üìù Debug Makevars written to $DEBUG_PATH"

echo "‚úÖ src/Makevars generated with CXX17 support."