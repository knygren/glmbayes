// stirlerr.cl - OpenCL Adaptation of stirlerr.c
//@provides: stirlerr_large
//@depends: nmath
//@includes: nmath

// Bernoulli numbers (1/12, 1/360, â€¦) for the asymptotic series
#define S0  0.083333333333333333333   /* 1/12 */
#define S1  0.00277777777777777777778 /* 1/360 */
#define S2  0.00079365079365079365079 /* 1/1260 */
#define S3  0.00059523809523809523810 /* 1/1680 */
#define S4  0.00084175084175084175084 /* 1/1188 */
#define S5  0.00191752691752691752692 /* 691/360360 */
#define S6  0.00641025641025641025641 /* 1/156 */
#define S7  0.02955065359477124183007 /* 3617/122400 */
#define S8  0.17964437236883057316494 /* 43867/244188 */
#define S9  1.39243221690590111642743 /* 174611/125400 */
#define S10 13.402864044168391994479 /* 77683/5796  */
#define S11 156.84828462600201730637 /* 236364091/1506960 */
#define S12 2193.10333333333333333333/* 657931/300 */
#define S13 36108.77125372498935717327/* 3392780147/93960 */
#define S14 691472.26885131306710839  /* 1723168255201/2492028 */
#define S15 15238221.53940741619228337 /* 7709321041217/505920 */
#define S16 382900751.39141414141414 /* 151628697551/396 */

static const double sferr_halves[31] = {
    0.0, /* 0 placeholder */
    0.1534264097200273452913848,  /* 0.5 */
    0.0810614667953272582196702,  /* 1.0 */
    0.0548141210519176538961390,  /* 1.5 */
    0.0413406959554092940938221,  /* 2.0 */
    0.03316287351993628748511048, /* 2.5 */
    0.02767792568499833914878929, /* 3.0 */
    0.02374616365629749597132920, /* 3.5 */
    0.02079067210376509311152277, /* 4.0 */
    0.01848845053267318523077934, /* 4.5 */
    0.01664469118982119216319487, /* 5.0 */
    0.01513497322191737887351255, /* 5.5 */
    0.01387612882307074799874573, /* 6.0 */
    0.01281046524292022692424986, /* 6.5 */
    0.01189670994589177009505572, /* 7.0 */
    0.01110455975820691732662991, /* 7.5 */
    0.01041126526197209649747857, /* 8.0 */
    0.00979941612615880329838948, /* 8.5 */
    0.00925546218271273291772864, /* 9.0 */
    0.00876870013413938546295282, /* 9.5 */
    0.00833056343336287125646932, /* 10.0 */
    0.00793411456431402054724810, /* 10.5 */
    0.00757367548795184079497202, /* 11.0 */
    0.00724455430132038317954391, /* 11.5 */
    0.00694284010720952986566415, /* 12.0 */
    0.00666524703270768244235439, /* 12.5 */
    0.00640899418800420706843963, /* 13.0 */
    0.00617171226303945764753287, /* 13.5 */
    0.00595137011275884773562442, /* 14.0 */
    0.00574621651301011568202359, /* 14.5 */
    0.00555473355196280137103869  /* 15.0 */
};




inline double stirlerr_large(double n) {
    double nn;
    if (n <= 23.5) {
        nn = n + n;
        
      if (n <= 15.0 && nn == (int)nn) {

             return sferr_halves[(int)nn];

        }

         nn = n * n;
	if (n > 12.8)	return (S0-(S1-(S2-(S3-(S4-(S5 -S6/nn)/nn)/nn)/nn)/nn)/nn)/n;		// k = 7
	if (n > 12.3)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6 -S7/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n;	// k = 8
	if (n >  8.9)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7 -S8/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n;	// k = 9
	/* if (n >  7.9)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8 -S9/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n; skip k = 10 */
	if (n >  7.3)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-S10/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n; // 11
	/* if (n >  6.5)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-(S10-S11/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n; skip k=12*/
	if (n >  6.6)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-(S10-(S11-S12/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n;
	/* if (n >  5.7)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-(S10-(S11-(S12-S13/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n; skip k= 14 */
	if (n >  6.1)	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-(S10-(S11-(S12-(S13-S14/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n; // k = 15
	/* ....		return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-(S10-(S11-(S12-(S13-(S14-S15/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n;
	 * skip order k=16 : never "good" for double prec */
	/* 6.1 >= n > 5.25 */
	return (S0-(S1-(S2-(S3-(S4-(S5-(S6-(S7-(S8-(S9-(S10-(S11-(S12-(S13-(S14-(S15-S16/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/nn)/n;


} // End of <= 23.5 condition

else{
nn = n * n;
        if (n > 15.7e6) return S0 / n;
        if (n > 6180)   return (S0 - S1 / nn) / n;
        if (n >  205)   return (S0 - (S1 - S2 / nn) / nn) / n;
        if (n >   86)   return (S0 - (S1 - (S2 - S3 / nn) / nn) / nn) / n;
        if (n >   27)   return (S0 - (S1 - (S2 - (S3 - S4 / nn) / nn) / nn) / nn) / n;
        /* 23.5 < n <= 27 */
        return (S0 - (S1 - (S2 - (S3 - (S4 - S5 / nn) / nn) / nn) / nn) / nn) / n;
}

} // end of function
















